{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"The Ontology Development Kit (ODK) - Documentation","text":"<p>Manage your ontology's life cycle with the Ontology Development Kit (ODK)! </p> <p>The ODK is - a toolbox of various ontology related tools such as ROBOT, owltools, dosdp-tools and many more, bundled as a docker image - a set of executable workflows for managing your ontology's continuous integration, quality control, releases and dynamic imports</p> <p>For more details, see</p> <ul> <li>2022 Paper </li> <li>2018 Article</li> <li>ICBO Workshop Slides 2018</li> <li>ICBO Workshop Slides 2017</li> </ul>"},{"location":"#where-to-get-help","title":"Where to get help","text":"<ul> <li>How-to guides:</li> <li>How to create your first repository with the ODK</li> <li>ODK in 20 minutes</li> <li>ODK adding custom QC checks</li> <li>How to import large ontologies efficiently</li> <li>Reference:</li> <li>Learn about the different kinds of release artefacts</li> <li>Learn about the ODK Project Configuration Schema for allowed parameters in your <code>[project]-odk.yaml</code> </li> <li>Community:</li> <li>If you have issues, file them on our issue tracker</li> <li>We also have an active community on Slack; you can request access by making a ticket here</li> </ul>"},{"location":"FrequentlyUsedODKCommands/","title":"Frequently used ODK commands","text":""},{"location":"FrequentlyUsedODKCommands/#updates-the-makefile-to-the-latest-odk","title":"Updates the Makefile to the latest ODK","text":"<pre><code>sh run.sh update_repo \n</code></pre>"},{"location":"FrequentlyUsedODKCommands/#recreates-and-deploys-the-automated-documentation","title":"Recreates and deploys the automated documentation","text":"<pre><code>sh run.sh make update_docs\n</code></pre>"},{"location":"FrequentlyUsedODKCommands/#preparing-a-new-release","title":"Preparing a new release","text":"<pre><code>sh run.sh make prepare_release\n</code></pre>"},{"location":"FrequentlyUsedODKCommands/#refreshing-a-single-import","title":"Refreshing a single import","text":"<pre><code>sh run.sh make refresh-%\n</code></pre> <p>Example:</p> <pre><code>sh run.sh make refresh-chebi\n</code></pre>"},{"location":"FrequentlyUsedODKCommands/#refresh-all-imports","title":"Refresh all imports","text":"<pre><code>sh run.sh make refresh-imports \n</code></pre>"},{"location":"FrequentlyUsedODKCommands/#refresh-all-imports-excluding-large-ones","title":"Refresh all imports excluding large ones","text":"<pre><code>sh run.sh make refresh-imports-excluding-large\n</code></pre>"},{"location":"FrequentlyUsedODKCommands/#run-all-the-qc-checks","title":"Run all the QC checks","text":"<pre><code>sh run.sh make test\n</code></pre>"},{"location":"FrequentlyUsedODKCommands/#print-the-version-of-the-currently-installed-odk","title":"Print the version of the currently installed ODK","text":"<pre><code>sh run.sh make odkversion\n</code></pre>"},{"location":"FrequentlyUsedODKCommands/#checks-the-owl2-dl-profile-validity","title":"Checks the OWL2 DL profile validity","text":"<p>(of a specific file)</p> <p><pre><code>sh run.sh make validate_profile_% \n</code></pre> Example:</p> <pre><code>sh run.sh make validate_profile_hp-edit.owl\n</code></pre>"},{"location":"ODKDevelopmentSnapshot/","title":"Using the ODK Development Snapshot","text":"<p>ODK is constantly being updated, but we release new versions only once every 3-4 months.  For people with a nack to beta-testing and experimental features, or those which need to use the latest versions of the bundled tools, we provide a \"development\" snapshot of the ODK which is updated roughly once per week:</p> <p>Look for <code>dev</code> tag in https://hub.docker.com/r/obolibrary/odkfull/tags</p> <p>You can install the development snapshot like this:</p> <pre><code>docker pull obolibrary/odkfull:dev\n</code></pre> <p>Important:</p> <ol> <li>The <code>dev</code> snapshot of ODK is unstable, and therefore will have bugs. You use it at your own risk!</li> <li>You cannot rely on any of the features in the development snapshot to make it into production (at least not with more than 85% confidence).</li> </ol>"},{"location":"ODKDevelopmentSnapshot/#how-to-install-and-use-development-snapshot-in-odk-ontology-repo","title":"How to install and use development snapshot in ODK Ontology Repo","text":"<p>If you want to use the development snapshot with your <code>run.sh</code> docker wrapper, you will have to make sure that have enabled it correctly. </p> <ol> <li><code>docker pull obolibrary/odkfull:dev</code> As mentioned above, this command installs the development snapshot</li> <li><code>docker pull obolibrary/odkfull</code></li> <li>Make sure your repo is up to date with the latest official release version (at least 1.6)</li> <li>Run <code>ODK_TAG=dev sh run.sh update_repo</code> 2x.</li> </ol> <p>You have now set your repo up to run via the development snapshot. At the top of the file, in the comments, your automatically-generated src/ontology/Makefile should now reference the development snapshot you have installed rather than the stable production release.</p> <p>Finally:</p> <ol> <li>You can now run any command via the <code>run.sh</code> docker wrapper. Just make sure you use the appropriate prefix depending on your version of the ODK:</li> <li>If you are using ODK &gt;= 1.6 run <code>ODK_TAG=dev sh run.sh update_repo</code> (or whatever other command you wanted to run).</li> </ol>"},{"location":"Synonyms/","title":"Synonyms","text":"<p>Please refer to https://oboacademy.github.io/obook/reference/synonyms-obo/</p>"},{"location":"UsingRobotPlugins/","title":"Using ROBOT Plugins","text":"<p>Since version 1.9.5, the ROBOT tool allows to use plugins that provide supplementary commands that are not part of the default command set.</p>"},{"location":"UsingRobotPlugins/#declaring-the-plugins-to-be-used","title":"Declaring the plugins to be used","text":"<p>Before you can use plugins in a custom workflow, the ODK must be aware of those plugins. There are several ways to do that.</p>"},{"location":"UsingRobotPlugins/#listing-the-plugins-in-the-odk-configuration","title":"Listing the plugins in the ODK configuration","text":"<p>Add a new <code>robot_plugins</code> section to your ODK configuration file (<code>src/ontology/ONT-odk.yaml</code>). That section should contain a single <code>plugins</code> key, which itself should contain the list of the plugins you want to use. Each entry in the list must contain at least a <code>name</code> key, which is the name under which the plugin will be available, and optionally a <code>mirror_from</code> key, pointing to an online location from which the plugin can be downloaded.</p> <p>For example, to use the Uberon plugin:</p> <pre><code>robot_plugins:\n  plugins:\n    - name: uberon\n      mirror_from: https://github.com/gouttegd/uberon-robot-plugin/releases/download/uberon-robot-plugin-0.2.0/uberon.jar\n</code></pre> <p>If you do not specify a download location with the <code>mirror_from</code> key, a dummy rule <code>${ROBOT_PLUGINS_DIRECTORY}/uberon.jar</code> will be generated in the standard Makefile. You will need to override that rule in your ontology-specific Makefile:</p> <pre><code>${ROBOT_PLUGINS_DIRECTORY}/uberon.jar:\n    curl -L -o $@ https://github.com/gouttegd/uberon-robot-plugin/releases/download/uberon-robot-plugin-0.2.0/uberon.jar\n</code></pre>"},{"location":"UsingRobotPlugins/#using-custom-rules","title":"Using custom rules","text":"<p>If for whatever reason you do not want to modify your ODK configuration, you can still set up a plugin by adding a rule such as the one above in the custom Makefile, and listing the plugin in the <code>custom_robot_plugins</code> variable. For example, again with the KGCL lplugin:</p> <pre><code>${ROBOT_PLUGINS_DIRECTORY}/uberon.jar:\n    curl -L -o $@ https://github.com/gouttegd/uberon-robot-plugin/releases/download/uberon-robot-plugin-0.2.0/uberon.jar\n\ncustom_robot_plugins: $(ROBOT_PLUGINS_DIRECTORY)/uberon.jar\n</code></pre>"},{"location":"UsingRobotPlugins/#putting-the-plugin-file-in-the-top-level-plugins-directory","title":"Putting the plugin file in the top-level <code>plugins</code> directory","text":"<p>Any Jar file found in the repository\u2019s top-level <code>plugins</code> directory (if such a directory exists) will automatically be found by the ODK, without requiring any change to the ODK configuration or the custom Makefile.</p>"},{"location":"UsingRobotPlugins/#odk-provided-plugins","title":"ODK-provided plugins","text":"<p>Some plugins are already bundled with the ODK and don\u2019t need to be declared or downloaded from somewhere else. For now, there are only two such plugins:</p> <ul> <li>the SSSOM plugin;</li> <li>the KGCL plugin.</li> </ul> <p>More default plugins may be added in future ODK versions.</p>"},{"location":"UsingRobotPlugins/#using-a-plugin-a-custom-workflow","title":"Using a plugin a custom workflow","text":"<p>Any Make rule that involves the use of a ROBOT plugin MUST depend on the <code>all_robot_plugins</code> target. This will ensure that all plugins have been properly set up in the runtime ROBOT plugins directory.</p>"},{"location":"project-schema/","title":"ODK Schema","text":""},{"location":"project-schema/#odk-project-configuration-schema","title":"ODK Project Configuration Schema","text":"<ul> <li> <p><code>allow_equivalents</code> (string): can be all, none or asserted-only (see ROBOT documentation: http://robot.obolibrary.org/reason). Default: <code>\"asserted-only\"</code>.</p> </li> <li> <p><code>catalog_file</code> (string): Name of the catalog file to be used by the build. Default: <code>\"catalog-v001.xml\"</code>.</p> </li> <li> <p><code>ci</code> (list): continuous integration defaults; currently available: travis, github_actions, gitlab-ci. Default: <code>[\"github_actions\"]</code>.</p> </li> <li> <p>Items (string)</p> </li> <li> <p><code>components</code>:</p> <ul> <li><code>base_iris</code> (list) A list of URI prefixes used to identify terms belonging to the component.</li> <li>Items (string)</li> <li><code>filename</code> (string) The filename of this component.</li> <li><code>make_base</code> (boolean): if make_base is true, the file is turned into a base (works with <code>source</code>). Default: <code>false</code>.</li> <li><code>mappings</code> (list) A list of SSSOM template names. If set, these will be used to source this component.</li> <li>Items (string)</li> <li><code>source</code> (string) The URL source for which the component should be obtained.</li> <li><code>sssom_tool_options</code> (string): SSSOM toolkit options passed to the sssom command used to generate this product command. Default: <code>\"\"</code>.</li> <li><code>template_options</code> (string) ROBOT options passed to the template command.</li> <li><code>templates</code> (list) A list of ROBOT template names. If set, these will be used to source this component.</li> <li>Items (string)</li> <li><code>use_mappings</code> (boolean): If true, the component will be sourced from one or more SSSOM mapping files. Default: <code>false</code>.</li> <li><code>use_template</code> (boolean): If true, the component will be sourced by a template. Default: <code>false</code>.</li> <li><code>directory</code> (string): directory where components are maintained. Default: <code>components</code>.</li> <li><code>products</code> (list)<ul> <li><code>base_iris</code> (list) A list of URI prefixes used to identify terms belonging to the component.</li> <li>Items (string)</li> <li><code>filename</code> (string) The filename of this component.</li> <li><code>make_base</code> (boolean): if make_base is true, the file is turned into a base (works with <code>source</code>). Default: <code>false</code>.</li> <li><code>mappings</code> (list) A list of SSSOM template names. If set, these will be used to source this component.</li> <li>Items (string)</li> <li><code>source</code> (string) The URL source for which the component should be obtained.</li> <li><code>sssom_tool_options</code> (string): SSSOM toolkit options passed to the sssom command used to generate this product command. Default: <code>\"\"</code>.</li> <li><code>template_options</code> (string) ROBOT options passed to the template command.</li> <li><code>templates</code> (list) A list of ROBOT template names. If set, these will be used to source this component.</li> <li>Items (string)</li> <li><code>use_mappings</code> (boolean): If true, the component will be sourced from one or more SSSOM mapping files. Default: <code>false</code>.</li> <li><code>use_template</code> (boolean): If true, the component will be sourced by a template. Default: <code>false</code>.</li> </ul> </li> </ul> </li> <li> <p><code>contact</code> (string) Single contact for ontology as required by OBO.</p> </li> <li> <p><code>contributors</code> (list) List of ontology contributors (currently setting this has no effect).</p> </li> <li> <p>Items (string)</p> </li> <li> <p><code>create_obo_metadata</code> (boolean): if true OBO Markdown and PURL configs are created. Default: <code>true</code>.</p> </li> <li> <p><code>creators</code> (list) List of ontology creators (currently setting this has no effect).</p> </li> <li> <p>Items (string)</p> </li> <li> <p><code>custom_makefile_header</code> (string): A multiline string that is added to the Makefile. Default: <code>\"\\n# ----------------------------------------\\n# More information: https://github.com/INCATools/ontology-development-kit/\\n\"</code>.</p> </li> <li> <p><code>description</code> (string): Provide a short description of the ontology. Default: <code>\"None\"</code>.</p> </li> <li> <p><code>documentation</code>:</p> <ul> <li><code>documentation_system</code> (string): Currently, only mkdocs is supported.  Default: <code>\"mkdocs\"</code>.</li> </ul> </li> <li> <p><code>dosdp_tools_options</code> (string): default parameters for dosdp-tools. Default: <code>\"--obo-prefixes=true\"</code>.</p> </li> <li> <p><code>edit_format</code> (string): Format in which the edit file is managed, either obo or owl. Default: <code>\"owl\"</code>.</p> </li> <li> <p><code>ensure_valid_rdfxml</code> (boolean): When enabled, ensure that any RDF/XML product file is valid. Default: <code>true</code>.</p> </li> <li> <p><code>exclude_tautologies</code> (string): Remove tautologies such as A SubClassOf: owl:Thing or owl:Nothing SubclassOf: A. For more information see http://robot.obolibrary.org/reason#excluding-tautologies. Default: <code>\"structural\"</code>.</p> </li> <li> <p><code>export_formats</code> (list): A list of export formats you wish your release artefacts to be exported to, such as owl, obo, gz, ttl. Default: <code>[\"owl\", \"obo\"]</code>.</p> </li> <li> <p>Items (string)</p> </li> <li> <p><code>export_project_yaml</code> (boolean): Flag to set if you want a full project.yaml to be exported, including all the default options. Default: <code>false</code>.</p> </li> <li> <p><code>extra_rdfxml_checks</code> (boolean): When enabled, RDF/XML product files are checked against additional parsers. Default: <code>false</code>.</p> </li> <li> <p><code>git_main_branch</code> (string): The main branch for your repo, such as main, or (now discouraged) master. Default: <code>\"main\"</code>.</p> </li> <li> <p><code>git_user</code> (string): GIT user name (necessary for generating releases). Default: <code>\"\"</code>.</p> </li> <li> <p><code>github_org</code> (string): Name of github org or username where repo will live. Examples: obophenotype, cmungall. Default: <code>\"\"</code>.</p> </li> <li> <p><code>gzip_main</code> (boolean): if true add a gzipped version of the main artefact. Default: <code>false</code>.</p> </li> <li> <p><code>id</code> (string): OBO id for this ontology. Must be lowercase Examples: uberon, go, cl, envo, chebi. Default: <code>\"\"</code>.</p> </li> <li> <p><code>import_component_format</code> (string): The default serialisation for all components and imports. Default: <code>\"ofn\"</code>.</p> </li> <li> <p><code>import_group</code>:</p> <ul> <li><code>disabled</code> (boolean): if set then this is not used. Default: <code>false</code>.</li> <li><code>ids</code> (list) potentially deprecated, specify explicit product list instead.</li> <li>Items (string)</li> <li><code>rebuild_if_source_changes</code> (boolean): if false then upstream ontology is re-downloaded any time edit file changes. Default: <code>true</code>.</li> <li><code>annotate_defined_by</code> (boolean): If set to true, the annotation rdfs:definedBy is added for each external class.     In the case of use_base_merging is also true, this will be added to the imports/merged_import.owl file.    When imports are not merged, the annotation is added during the release process to the full release artefact.  Default: <code>False</code>.</li> <li><code>annotation_properties</code> (list): Define which annotation properties to pull in. Default: <code>['rdfs:label', 'IAO:0000115']</code>.</li> <li><code>base_merge_drop_equivalent_class_axioms</code> (boolean): If set to true, equivalent class axioms will be removed before extracting a module with the base-merging process. Default: <code>True</code>.</li> <li><code>directory</code> (string): directory where imports are extracted into to. Default: <code>imports/</code>.</li> <li><code>exclude_iri_patterns</code> (list): List of IRI patterns. If set, IRIs matching and IRI pattern will be removed from the import. Default: ``.</li> <li><code>export_obo</code> (boolean): If set to true, modules will not only be created in OWL, but also OBO format. Default: <code>False</code>.</li> <li><code>mirror_max_time_download</code> (integer): Corresponds to the cURL --max-time parameter (in seconds), see http://www.ipgp.fr/~arnaudl/NanoCD/software/win32/curl/docs/curl.html. Default: <code>200</code>.</li> <li><code>mirror_retry_download</code> (integer): Corresponds to the cURL --retry parameter, see http://www.ipgp.fr/~arnaudl/NanoCD/software/win32/curl/docs/curl.html. Default: <code>4</code>.</li> <li><code>module_type</code> (string): Module type. Supported: slme, minimal, custom. Default: <code>slme</code>.</li> <li><code>module_type_slme</code> (string): SLME module type. Supported: BOT, TOP, STAR. Default: <code>BOT</code>.</li> <li><code>products</code> (list)<ul> <li><code>description</code> (string) A concise textual description of the product.</li> <li><code>id</code> (string, required) ontology project identifier / shorthand; e.g. go, obi, envo.</li> <li><code>maintenance</code> (string): A setting that can be used to change certain assets that are typically managed automatically (by ODK) to manual or other maintenance strategies. Default: <code>\"manual\"</code>.</li> <li><code>rebuild_if_source_changes</code> (boolean): If false then previously downloaded versions of external ontologies are used. Default: <code>true</code>.</li> <li><code>robot_settings</code>:<ul> <li><code>memory_gb</code> (integer) Amount of memory in GB to provide for tool such as robot.</li> </ul> </li> <li><code>annotation_properties</code> (list): Define which annotation properties to pull in. Default: <code>['rdfs:label', 'IAO:0000115']</code>.</li> <li><code>base_iris</code> (list): if specified this URL is used rather than the default OBO PURL for the main OWL product. Default: ``.</li> <li><code>is_large</code> (boolean): if large, ODK may take measures to reduce the memory footprint of the import. Default: <code>False</code>.</li> <li><code>make_base</code> (boolean): if make_base is true, try to extract a base file from the mirror. Default: <code>False</code>.</li> <li><code>mirror_from</code> (string): if specified this URL is used rather than the default OBO PURL for the main OWL product. Default: ``.</li> <li><code>mirror_type</code> (string): Define the type of the mirror for your import. Supported: base, custom, no_mirror. Default: ``.</li> <li><code>module_type</code> (string): Module type. Supported: slme, minimal, custom, mirror. Default: ``.</li> <li><code>module_type_slme</code> (string): SLME module type. Supported: BOT, TOP, STAR. Default: <code>BOT</code>.</li> <li><code>slme_individuals</code> (string): See http://robot.obolibrary.org/extract#syntactic-locality-module-extractor-slme. Default: <code>include</code>.</li> <li><code>use_base</code> (boolean): if use_base is true, try use the base IRI instead of normal one to mirror from. Default: <code>False</code>.</li> <li><code>use_gzipped</code> (boolean): if use_gzipped is true, try use the base IRI instead of normal one to mirror from. Default: <code>False</code>.</li> </ul> </li> <li><code>release_imports</code> (boolean): If set to True, imports are copied to the release directory. Default: <code>False</code>.</li> <li><code>slme_individuals</code> (string): See http://robot.obolibrary.org/extract#syntactic-locality-module-extractor-slme. Default: <code>include</code>.</li> <li><code>use_base_merging</code> (boolean): If set to true, mirrors will be merged before determining a suitable seed. This can be a quite costly process. Default: <code>False</code>.</li> </ul> </li> <li> <p><code>import_pattern_ontology</code> (boolean): if true import pattern.owl. Default: <code>false</code>.</p> </li> <li> <p><code>license</code> (string): Which license is ontology supplied under - must be an IRI. Default: <code>\"https://creativecommons.org/licenses/unspecified\"</code>.</p> </li> <li> <p><code>namespaces</code> (list) A list of namespaces that are considered at home in this ontology. Used for certain filter commands.</p> </li> <li> <p>Items (string)</p> </li> <li> <p><code>obo_format_options</code> (string): Additional args to pass to robot when saving to obo. TODO consider changing to a boolean for checks. Default: <code>\"\"</code>.</p> </li> <li> <p><code>owltools_memory</code> (string): OWLTools memory, for example 4GB. Default: <code>\"\"</code>.</p> </li> <li> <p><code>pattern_pipelines_group</code>:</p> <ul> <li><code>disabled</code> (boolean): if set then this is not used. Default: <code>false</code>.</li> <li><code>ids</code> (list) potentially deprecated, specify explicit product list instead.</li> <li>Items (string)</li> <li><code>rebuild_if_source_changes</code> (boolean): if false then upstream ontology is re-downloaded any time edit file changes. Default: <code>true</code>.</li> <li><code>directory</code> (string): directory where pattern source lives, also where TSV exported to. Default: <code>../patterns/</code>.</li> <li><code>matches</code> (list)<ul> <li><code>description</code> (string) A concise textual description of the product.</li> <li><code>id</code> (string, required) ontology project identifier / shorthand; e.g. go, obi, envo.</li> <li><code>maintenance</code> (string): A setting that can be used to change certain assets that are typically managed automatically (by ODK) to manual or other maintenance strategies. Default: <code>\"manual\"</code>.</li> <li><code>rebuild_if_source_changes</code> (boolean): If false then previously downloaded versions of external ontologies are used. Default: <code>true</code>.</li> <li><code>robot_settings</code>:<ul> <li><code>memory_gb</code> (integer) Amount of memory in GB to provide for tool such as robot.</li> </ul> </li> <li><code>dosdp_tools_options</code> (string): Default: <code>--obo-prefixes=true</code>.</li> <li><code>ontology</code> (string): Default: <code>$(SRC)</code>.</li> </ul> </li> <li><code>products</code> (list)</li> <li>...</li> </ul> </li> <li> <p><code>primary_release</code> (string): Which release file should be published as the primary release artefact, i.e. foo.owl. Default: <code>\"full\"</code>.</p> </li> <li> <p><code>public_release</code> (string): if true add functions to run automated releases (experimental). Current options are: github_curl, github_python. Default: <code>\"none\"</code>.</p> </li> <li> <p><code>public_release_assets</code> (list) A list of files that gets added to a github/gitlab/etc release (as assets). If this option is not set (None), the standard ODK assets will be deployed.</p> </li> <li> <p>Items (string)</p> </li> <li> <p><code>reasoner</code> (string): Name of reasoner to use in ontology pipeline, see robot reason docs for allowed values. Default: <code>\"ELK\"</code>.</p> </li> <li> <p><code>release_artefacts</code> (list): A list of release artefacts you wish to be exported. Supported: base, full, baselite, simple, non-classified,      simple-non-classified, basic. Default: <code>[\"full\", \"base\"]</code>.</p> </li> <li> <p>Items (string)</p> </li> <li> <p><code>release_date</code> (boolean): if true, releases will be tagged with a release date (oboInOwl:date). Default: <code>false</code>.</p> </li> <li> <p><code>release_diff</code> (boolean): When enabled, a diff is generated between the current release and the new one. Default: <code>false</code>.</p> </li> <li> <p><code>release_materialize_object_properties</code> (list) Define which object properties to materialise at release time.</p> </li> <li> <p>Items (string)</p> </li> <li> <p><code>release_use_reasoner</code> (boolean): If set to True, the reasoner will be used during the release process. The reasoner is used for three operations:     reason (the classification/subclassOf hierarchy computation); materialize (the materialisation of simple existential/     object property restrictions); reduce (the removal of redundant subclassOf axioms). Default: <code>true</code>.</p> </li> <li> <p><code>remove_owl_nothing</code> (boolean): Flag to set if you want odk to remove owl:Nothing from releases. Default: <code>false</code>.</p> </li> <li> <p><code>repo</code> (string): Name of repo (do not include org). E.g. cell-ontology. Default: <code>\"\"</code>.</p> </li> <li> <p><code>robot_java_args</code> (string): Java args to pass to ROBOT at runtime, such as -Xmx6G. Default: <code>\"\"</code>.</p> </li> <li> <p><code>robot_report</code> (object): Block that includes settings for ROBOT report, ROBOT verify and additional reports that are generated. Default: <code>{\"custom_profile\": false, \"custom_sparql_checks\": [\"owldef-self-reference\", \"iri-range\", \"label-with-iri\", \"multiple-replaced_by\", \"dc-properties\"], \"custom_sparql_exports\": [\"basic-report\", \"class-count-by-prefix\", \"edges\", \"xrefs\", \"obsoletes\", \"synonyms\"], \"ensure_owl2dl_profile\": true, \"fail_on\": null, \"release_reports\": false, \"report_on\": [\"edit\"], \"sparql_test_on\": [\"edit\"], \"use_base_iris\": true, \"use_labels\": true}</code>.</p> </li> <li> <p><code>robot_settings</code>:</p> <ul> <li><code>memory_gb</code> (integer) Amount of memory in GB to provide for tool such as robot.</li> </ul> </li> <li> <p><code>robot_version</code> (string) Only set this if you want to pin to a specific robot version.</p> </li> <li> <p><code>sssom_mappingset_group</code>:</p> <ul> <li><code>directory</code> (string): Default: <code>\"../mappings\"</code>.</li> <li><code>products</code> (list)<ul> <li><code>description</code> (string) A concise textual description of the product.</li> <li><code>id</code> (string, required) ontology project identifier / shorthand; e.g. go, obi, envo.</li> <li><code>maintenance</code> (string): A setting that can be used to change certain assets that are typically managed automatically (by ODK) to manual or other maintenance strategies. Default: <code>\"manual\"</code>.</li> <li><code>rebuild_if_source_changes</code> (boolean): If false then previously downloaded versions of external ontologies are used. Default: <code>true</code>.</li> <li><code>robot_settings</code>:</li> <li><code>memory_gb</code> (integer) Amount of memory in GB to provide for tool such as robot.</li> </ul> </li> <li><code>mirror_from</code> (string): if specified this URL is used to mirror the mapping set. Default: ``.</li> <li><code>source_file</code> (string): The name of the file from which the mappings should be extracted. Default: ``.</li> <li><code>sssom_tool_options</code> (string): SSSOM toolkit options passed to the sssom command used to generate this product command. Default: ``.</li> <li><code>release_mappings</code> (boolean): If set to True, mappings are copied to the release directory. Default: <code>false</code>.</li> </ul> </li> <li> <p><code>subset_group</code>:</p> <ul> <li><code>disabled</code> (boolean): if set then this is not used. Default: <code>false</code>.</li> <li><code>ids</code> (list) potentially deprecated, specify explicit product list instead.</li> <li>Items (string)</li> <li><code>rebuild_if_source_changes</code> (boolean): if false then upstream ontology is re-downloaded any time edit file changes. Default: <code>true</code>.</li> <li><code>directory</code> (string): directory where subsets are placed after extraction from ontology. Default: <code>subsets/</code>.</li> <li><code>products</code> (list)<ul> <li><code>description</code> (string) A concise textual description of the product.</li> <li><code>id</code> (string, required) ontology project identifier / shorthand; e.g. go, obi, envo.</li> <li><code>maintenance</code> (string): A setting that can be used to change certain assets that are typically managed automatically (by ODK) to manual or other maintenance strategies. Default: <code>\"manual\"</code>.</li> <li><code>rebuild_if_source_changes</code> (boolean): If false then previously downloaded versions of external ontologies are used. Default: <code>true</code>.</li> <li><code>robot_settings</code>:<ul> <li><code>memory_gb</code> (integer) Amount of memory in GB to provide for tool such as robot.</li> </ul> </li> <li><code>creators</code> (list): list of people that are credited as creators/maintainers of the subset. Default: ``.</li> </ul> </li> </ul> </li> <li> <p><code>title</code> (string): Concise descriptive text about this ontology. Default: <code>\"\"</code>.</p> </li> <li> <p><code>travis_emails</code> (list) Emails to use in travis configurations. </p> </li> <li> <p>Items (string)</p> </li> <li> <p><code>uribase</code> (string): Base URI for PURLs. For an example see https://gitlab.c-path.org/c-pathontology/critical-path-ontology. Default: <code>\"http://purl.obolibrary.org/obo\"</code>.</p> </li> <li> <p><code>uribase_suffix</code> (string) Suffix for the uri base. If not set, the suffix will be the ontology id by default.</p> </li> <li> <p><code>use_context</code> (boolean): If True, a context file is created that allows the user to specify prefixes used across the project. Default: <code>false</code>.</p> </li> <li> <p><code>use_custom_import_module</code> (boolean): if true add a custom import module which is managed through a robot template. This can also be used to manage your module seed. Default: <code>false</code>.</p> </li> <li> <p><code>use_dosdps</code> (boolean): if true use dead simple owl design patterns. Default: <code>false</code>.</p> </li> <li> <p><code>use_edit_file_imports</code> (boolean): If True, ODK will release the ontology with imports explicitly specified by owl:imports in the edit file.     If False, ODK will build and release the ontology with all imports and all components specified in the ODK config file. Default: <code>true</code>.</p> </li> <li> <p><code>use_env_file_docker</code> (boolean): if true environment variables are collected by the docker wrapper and passed into the container. Default: <code>false</code>.</p> </li> <li> <p><code>use_external_date</code> (boolean): Flag to set if you want odk to use the host <code>date</code> rather than the docker internal <code>date</code>. Default: <code>false</code>.</p> </li> <li> <p><code>use_mappings</code> (boolean): if true use SSSOM mapping files. Default: <code>false</code>.</p> </li> <li> <p><code>use_templates</code> (boolean): if true use ROBOT templates. Default: <code>false</code>.</p> </li> <li> <p><code>workflows</code> (list): Workflows that are synced when updating the repo. Currently available: docs, diff, qc, release-diff. Default: <code>[\"docs\"]</code>.</p> </li> <li>Items (string)</li> </ul>"},{"location":"schema-options/","title":"Breakdown of values for the ODK schema","text":"<p>The auto-generated schema can be found here.</p> <p>This document provides additional explanations about options in the ODK schema.</p>"},{"location":"schema-options/#module-types","title":"Module types","text":"<p>TBD</p>"}]}